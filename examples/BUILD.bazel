load("@buildozer//:buildozer.bzl", "BUILDOZER_LABEL")
load("@bazel_env.bzl", "bazel_env")

# `bazel run //:bazel_env` prints a summary and setup steps.
bazel_env(
    name = "bazel_env",
    toolchains = {
        "cc_toolchain": "@bazel_tools//tools/cpp:current_cc_toolchain",
        "jdk": "@rules_java//toolchains:current_host_java_runtime",
    },
    tools = {
        # Tool paths can reference the Make variables provided by toolchains.
        "bazel-cc": "$(CC)",
        # Tools can also be specified as labels.
        "buildifier": "@buildifier_prebuilt//:buildifier",
        "buildozer": BUILDOZER_LABEL,
        "go": "@rules_go//go",
        "jar": "$(JAVABASE)/bin/jar",
        "java": "$(JAVA)",
        "jq": ":jq",
    },
)

alias(
    name = "jq",
    actual = select({
        "@platforms//os:linux": "@jq_linux_amd64//file",
        "@platforms//os:macos": "@jq_macos_amd64//file",
        "@platforms//os:windows": "@jq_windows_amd64//file",
    }),
)

# Lines below are not part of the example, they are used to test the example.

sh_test(
    name = "bazel_env_test",
    srcs = ["bazel_env_test.sh"],
    data = [
        # Used to cd into the workspace directory.
        "MODULE.bazel",
        # Enforces that the bazel_env has been built.
        ":bazel_env",
    ],
    tags = [
        # The test only depends on the bazel_env fake outputs, not the individual tools.
        "external",
        # The test cd's into the workspace directory and expects the bazel_env to be present.
        "local",
    ],
)

bazel_env(
    name = "empty_env",
)
