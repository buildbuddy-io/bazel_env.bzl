load("@bazel_env.bzl", "bazel_env")
load("@bazel_features//:features.bzl", "bazel_features")
load("@buildozer//:buildozer.bzl", "BUILDOZER_LABEL")
load("@multitool//:tools.bzl", MULTITOOL_TOOLS = "TOOLS")
load("@rules_python//python:py_binary.bzl", "py_binary")
load("@rules_python//python:py_library.bzl", "py_library")

# Test-only workaround for https://github.com/buildbuddy-io/bazel_env.bzl/pull/35#issuecomment-2853979830.
# Ignore this line for the purpose of the example.
load("@rules_shell//shell/private:sh_test.bzl", "sh_test")
load(":test_helpers.bzl", "REPO_NAME_SEPARATOR")

# toolchain_type targets are allowed with Bazel 9.0.0-pre.20250311.1 and later.
_TOOLCHAIN_TYPES_SUPPORTED = bazel_features.rules.aspect_propagation_context

# `bazel run //:bazel_env` prints a summary and setup steps.
bazel_env(
    name = "bazel_env",
    toolchains = {
        # "cc_toolchain": "@bazel_tools//tools/cpp:current_cc_toolchain",
        "jdk": "@rules_java//toolchains:current_host_java_runtime",
        "python": "@rules_python//python:current_py_toolchain",
        "nodejs": "@nodejs_toolchains//:resolved_toolchain",
        "rust": "@rules_rust//rust/toolchain:current_rust_toolchain",
        "rules_python_docs": "@rules_python_docs",
    } | (
        # toolchain_type targets are allowed with Bazel 9.0.0-pre.20250311.1 and later.
        # This conditional logic exists only to have the example work with any version of Bazel,
        # it's not necessary in practice.
        {
            "go": "@rules_go//go:toolchain",
        } if _TOOLCHAIN_TYPES_SUPPORTED else {}
    ),
    tools = {
        # Tool paths can reference the Make variables provided by toolchains.
        # "bazel-cc": "$(CC)",
        # Tools can also be specified as labels.
        "buildifier": "@buildifier_prebuilt//:buildifier",
        "buildozer": BUILDOZER_LABEL,
        "go": "@rules_go//go",
        "jar": "$(JAVABASE)/bin/jar",
        "java": "$(JAVA)",
        "jq": ":jq",
        "node": "$(NODE_PATH)",
        "pnpm": "@pnpm",
        "python": "$(PYTHON3)",
        "python_tool": ":python_tool",
        "cargo": "@rules_rust//tools/upstream_wrapper:cargo",
        "rustc": "@rules_rust//tools/upstream_wrapper:rustc",
        "rustfmt": "@rules_rust//tools/upstream_wrapper:rustfmt",
    } | MULTITOOL_TOOLS,
)

alias(
    name = "jq",
    actual = select({
        "@platforms//os:linux": "@jq_linux_amd64//file",
        "@platforms//os:macos": "@jq_macos_arm64//file",
        "@platforms//os:windows": "@jq_windows_amd64//file",
    }),
)

py_binary(
    name = "python_tool",
    srcs = ["python_tool.py"],
    tags = ["manual"],
    deps = [":python_tool_lib"],
)

py_library(
    name = "python_tool_lib",
    srcs = ["python_tool_lib.py"],
    tags = ["manual"],
)

# Lines below are not part of the example, they are used to test the example.

sh_test(
    name = "bazel_env_test",
    srcs = ["bazel_env_test.sh"],
    data = [
        # Used to cd into the workspace directory.
        "MODULE.bazel",
        # Enforces that the bazel_env has been built.
        ":bazel_env",
        # Replaces "bazel" in the test script.
        "fake_bazel.sh",
    ],
    env = {
        # The go command shows a warning if HOME is unset.
        "HOME": "/tmp/user",
        "BAZEL_REPO_NAME_SEPARATOR": REPO_NAME_SEPARATOR,
        "TOOLCHAIN_TYPES_SUPPORTED": str(_TOOLCHAIN_TYPES_SUPPORTED).lower(),
    },
    tags = [
        # The test only depends on the bazel_env fake outputs, not the individual tools.
        "external",
        # The test cd's into the workspace directory and expects the bazel_env to be present.
        "local",
    ],
    target_compatible_with = [
        "@platforms//os:linux",
    ],
)

sh_test(
    name = "bazel_env_test_windows",
    srcs = ["bazel_env_test_windows.sh"],
    data = [
        # Used to cd into the workspace directory.
        "MODULE.bazel",
        # Enforces that the bazel_env has been built.
        ":bazel_env",
        # Replaces "bazel" in the test script.
        "fake_bazel.sh",
    ],
    env = {
        # The go command shows a warning if HOME is unset.
        "HOME": "/tmp/user",
        "BAZEL_REPO_NAME_SEPARATOR": REPO_NAME_SEPARATOR,
        "TOOLCHAIN_TYPES_SUPPORTED": str(_TOOLCHAIN_TYPES_SUPPORTED).lower(),
    },
    tags = [
        # The test only depends on the bazel_env fake outputs, not the individual tools.
        "external",
        # The test cd's into the workspace directory and expects the bazel_env to be present.
        "local",
    ],
    target_compatible_with = [
        "@platforms//os:windows",
    ],
)

bazel_env(
    name = "empty_env",
)

platform(
    name = "exotic_platform",
    constraint_values = [
        "@platforms//os:wasi",
    ],
)
