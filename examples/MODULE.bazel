module(
    name = "bazel_env_examples",
    version = "0.0.0",
)

bazel_dep(name = "bazel_env.bzl")
local_path_override(
    module_name = "bazel_env.bzl",
    path = "..",
)

bazel_dep(name = "aspect_rules_js", version = "2.0.0-rc4")
bazel_dep(name = "bazel_features", version = "1.31.0")
bazel_dep(name = "buildifier_prebuilt", version = "7.3.1")
bazel_dep(name = "buildozer")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_cc", version = "0.1.2")
bazel_dep(name = "rules_go")
bazel_dep(name = "rules_java", version = "8.12.0")
bazel_dep(name = "rules_multitool", version = "1.3.0")
bazel_dep(name = "rules_nodejs", version = "6.3.5")
bazel_dep(name = "rules_python", version = "1.3.0")
bazel_dep(name = "rules_rust", version = "0.49.3")
bazel_dep(name = "rules_shell", version = "0.4.1")
bazel_dep(name = "toolchains_llvm", version = "1.4.0")

# Required for compatibility with Bazel@HEAD.
single_version_override(
    module_name = "buildozer",
    version = "7.1.2",
)

single_version_override(
    module_name = "rules_proto",
    version = "7.0.2",
)

bazel_dep(name = "aspect_bazel_lib", version = "2.19.2")

# TODO: Remove after the next release of rules_go.
git_override(
    module_name = "rules_go",
    commit = "0aa693db647ef99eeaf020cddd7ba967139be1c4",
    remote = "https://github.com/bazel-contrib/rules_go",
)

register_execution_platforms(
    "//:exotic_platform",
)

# Don't update the versions below, they are only used to verify the hermeticity of bazel_env.

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.21.13")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(
    node_version = "16.18.1",
)
use_repo(node, "nodejs_toolchains")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")
pnpm.pnpm(
    name = "pnpm",
    pnpm_version = "8.6.7",
    pnpm_version_integrity = "sha512-vRIWpD/L4phf9Bk2o/O2TDR8fFoJnpYrp2TKqTIZF/qZ2/rgL3qKXzHofHgbXsinwMoSEigz28sqk3pQ+yMEQQ==",
)
use_repo(pnpm, "pnpm")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = "3.11.8",
)

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    rustfmt_version = "1.80.0",
    versions = ["1.80.0"],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    name = "llvm_toolchain",
    llvm_version = "20.1.2",
)
use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")

http_file = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")

http_file(
    name = "jq_linux_amd64",
    executable = True,
    integrity = "sha256-LzErlYexwe3fOlP5oLfSdrm3uUV2yFvaIoCMqVBWlxY=",
    urls = ["https://github.com/jqlang/jq/releases/download/jq-1.7/jq-linux64"],
)

http_file(
    name = "jq_macos_arm64",
    executable = True,
    integrity = "sha256-uNMT/U872KCzOLnd0cAG/M+TEtxgmiDS1uS62WSqmfk=",
    urls = ["https://github.com/jqlang/jq/releases/download/jq-1.7/jq-macos-arm64"],
)

http_file(
    name = "jq_windows_amd64",
    executable = True,
    integrity = "sha256-LpzFTQpdCY4gB97OwduzxVXKL1qr3teuyQf+D/5AGqs=",
    urls = ["https://github.com/jqlang/jq/releases/download/jq-1.7/jq-win64.exe"],
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# An example of a filegroup to be made available under a fixed path with bazel_env.
http_archive(
    name = "rules_python_docs",
    build_file_content = """
filegroup(
    name = "rules_python_docs",
    srcs = glob(["**/*.md"]),
    visibility = ["//visibility:public"],
)
""",
    integrity = "sha256-n587MAqSZOTHeZkxLOZjvl3umlbjYaH2/n7GDhvu+aM=",
    strip_prefix = "rules_python-1.4.1/docs",
    url = "https://github.com/bazel-contrib/rules_python/releases/download/1.4.1/rules_python-1.4.1.tar.gz",
)

multitool = use_extension("@rules_multitool//multitool:extension.bzl", "multitool")
multitool.hub(lockfile = "//:tools.lock.json")
use_repo(multitool, "multitool")
